openapi: 3.0.3
info:
  title: bookManager APi
  description: bookManager APi
  version: 1.2.0
servers:
  - url: 'https'
paths:
  /books:
    get:
      operationId: getBooks
      parameters:
        - in: query
          name: bookName
          schema:
            type: string
        - in: query
          name: releaseDate
          schema:
            type: string
            format: date
        - $ref: "#/components/parameters/queryPagination"
        - $ref: "#/components/parameters/pathPagination"

      responses:
        '200':
          description: ok
    post:
      operationId: addABook
      requestBody:
        required: true
        content:
          /application/json:
            schema:
              $ref: "#/components/schemas/book"
      responses:
        '200':
          description: ok
    delete:
      description: delete a book by id
      parameters:
        - in: query
          required: true
          name: bookId
          schema:
            type: string
      responses:
        '200':
          description: deleted
    put:
      description: update a book
      parameters:
        - in : path
          required: true
          name: bookID
          schema:
            type: string
      requestBody:
        content:
          /application/json:
            schema:
              allOf:
                - $ref: "#/components/schemas/CrupdateBook"
      responses:
        '200':
          description: ok
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/CrupdateBook"
  /books/import:
    post:
      requestBody:
        required: false
        content:
          /application/json:
            schema:
              type: array
              items:
                allOf:
                  - $ref: "#/components/schemas/book"
      responses:
        '200':
          description: return a list of books
          content:
            /application/json:
              schema:
                type: array
                items:
                  allOf:
                    - $ref: "#/components/schemas/book"


  /authors:
    get:
      operationId: getAuthors
      parameters:
        - in: query
          name: authorName
          schema:
            type: string
        - $ref: "#/components/parameters/pathPagination"
        - $ref: "#/components/parameters/queryPagination"
      responses:
        '200':
          description: ok
    post:
      operationId: addAuthor
      requestBody:
        required: true
        content:
          /application/json:
            schema:
              $ref: "#/components/schemas/author"
      responses:
        '200':
          description: ok
    delete:
      description: delete a author by id
      parameters:
        - in: query
          required: true
          name: authorId
          schema:
            type: string
      responses:
        '200':
          description: deleted
    put:
      description: update a author
      parameters:
        - in : path
          required: true
          name: authorID
          schema:
            type: string
      requestBody:
        content:
          /application/json:
            schema:
              $ref: "#/components/schemas/author"
      responses:
        '200':
          description: ok

  /authors/import:
    post:
      description: import list of authors
      requestBody:
        required: false
        content:
          /application/json:
            schema:
             oneOf:
               - $ref: "#/components/schemas/importAuthor"
          /application/vnd.ms-excel:
             schema:
               oneOf:
                 - $ref: "#/components/schemas/importAuthor"

      responses:
        '200':
          description: ok
          content:
            /application/json:
              schema:
                type: array
                items:
                  allOf:
                    - $ref: "#/components/schemas/author"


  /books/{bookID}/authors/{authorID}:
    put:
      parameters:
        - in: path
          name: bookID
          required: true
          schema:
            type: string
        - in: path
          name: authorID
          required: true
          schema:
            type: string
      description: update book's author
      responses:
        '200':
          description: updated
  /books/authors:
    put:
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                allOf:
                  - $ref: "#/components/schemas/CrupdateBook"
                  - $ref: "#/components/schemas/author"
                  - type: object
                    properties:
                      id:
                        type: string
                      authorID:
                        type: string
      responses:
        '200':
          description: ok
components: 
  schemas:
    book:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        author:
          type: string
        releaseDate:
          type: string
          format: date
        pageNumbers:
          type: number
        topic:
          type: string
          enum:
            - ROMANCE
            - COMEDY
            - OTHER

    author:
      type: object
      properties:
        authorID:
          type: string
        name:
          type: string
        sex:
          type: string
          enum:
            - Male
            - Female
        birthdate:
          type: string
          format: date
    CrupdateBook:
      type: object
      properties:
        id:
          type: string
        bookName:
          type: string
        pageNumber:
          type: number
        topic:
          type: string
          enum:
            - romance
            - comedy
            - other
        releaseDate:
          type: string
          format: date
    importAuthor:
      type: object
      properties:
        authorName:
          type: string
        sex:
          type: string
          enum:
            - male
            - female
    importBook:
      type: object
      allOf:
        - $ref: "#/components/schemas/book"
        - properties:
            idAuthor:
              type: string
  parameters:
    queryPagination:
      in : query
      required: false
      name: pagination
      schema:
         type: object
         properties:
           page:
            type: number
            default: 1
           size:
             type: number
             default: 50
    pathPagination:
      in: path
      required: false
      name: pagination
      schema:
        type: object
        properties:
          page:
            type: number
            default: 1
          size:
            type: number
            default: 50
  responses:
    responseStructure:
      content:
        status:
          schema:
            type: object
            properties:
              statusCode:
                type: number
                maxLength: 3
                minLength: 3
              message:
                type: string
        body:
          schema:
           type: object



